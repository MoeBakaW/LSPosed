name: Core

on:
  workflow_dispatch:
    inputs:
      post_telegram:
        description: 'Post to Telegram'
        required: true
        type: boolean
  push:
    branches: [ master ]
    tags: [ v* ]
  pull_request:
  merge_group:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      CCACHE_BASEDIR: "${{ github.workspace }}"

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: "recursive"
          fetch-depth: 0

      - name: Write key
        if: ${{ ( github.event_name != 'pull_request' && github.ref == 'refs/heads/master' ) || github.ref_type == 'tag' }}
        run: |
          if [ ! -z "${{ secrets.KEY_STORE }}" ]; then
            echo androidStorePassword='${{ secrets.KEY_STORE_PASSWORD }}' >> gradle.properties
            echo androidKeyAlias='${{ secrets.ALIAS }}' >> gradle.properties
            echo androidKeyPassword='${{ secrets.KEY_PASSWORD }}' >> gradle.properties
            echo androidStoreFile='key.jks' >> gradle.properties
            echo ${{ secrets.KEY_STORE }} | base64 --decode > key.jks
          fi

      - name: Checkout pumPCin/api
        uses: actions/checkout@v3
        with:
          repository: pumPCin/api
          path: libxposed/api

      - name: Checkout pumPCin/service
        uses: actions/checkout@v3
        with:
          repository: pumPCin/service
          path: libxposed/service

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "21"

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true

      - name: Set up ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          max-size: 2G
          key: ${{ runner.os }}
          restore-keys: ${{ runner.os }}
          save: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}

      - name: Build dependencies
        working-directory: libxposed
        run: |
          echo 'org.gradle.caching=true' >> ~/.gradle/gradle.properties
          echo 'org.gradle.parallel=true' >> ~/.gradle/gradle.properties
          echo 'org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8 -XX:+UseParallelGC' >> ~/.gradle/gradle.properties
          echo 'android.native.buildOutput=verbose' >> ~/.gradle/gradle.properties
          cd api
          ./gradlew publishToMavenLocal
          cd ../service
          ./gradlew publishToMavenLocal

      - name: Build with Gradle
        run: |
          ./gradlew zipAll

      - name: Prepare artifact
        if: success()
        id: prepareArtifact
        run: |
          # Function to find and process files
          process_files() {
            local pattern=$1
            local type=$2
            local variant=$3
            local files=($(find . -name "$pattern"))
            if [ ${#files[@]} -gt 0 ]; then
              local name=$(basename "${files[0]}" .zip)
              echo "${type}${variant}Name=$name" >> $GITHUB_OUTPUT
              unzip -q "${files[0]}" -d "LSPosed-$type-$variant"
            else
              echo "Warning: No $type $variant file found matching $pattern"
            fi
          }

          # Process each variant
          process_files "LSPosed-v*-riru-release.zip" "riru" "Release"
          process_files "LSPosed-v*-riru-debug.zip" "riru" "Debug"
          process_files "LSPosed-v*-zygisk-release.zip" "zygisk" "Release"
          process_files "LSPosed-v*-zygisk-debug.zip" "zygisk" "Debug"

      - name: Upload riru release
        uses: actions/upload-artifact@v3
        if: steps.prepareArtifact.outputs.riruReleaseName
        with:
          name: ${{ steps.prepareArtifact.outputs.riruReleaseName }}
          path: "./LSPosed-riru-Release/*"

      - name: Upload riru debug
        uses: actions/upload-artifact@v3
        if: steps.prepareArtifact.outputs.riruDebugName
        with:
          name: ${{ steps.prepareArtifact.outputs.riruDebugName }}
          path: "./LSPosed-riru-Debug/*"

      - name: Upload zygisk release
        uses: actions/upload-artifact@v3
        if: steps.prepareArtifact.outputs.zygiskReleaseName
        with:
          name: ${{ steps.prepareArtifact.outputs.zygiskReleaseName }}
          path: "./LSPosed-zygisk-Release/*"

      - name: Upload zygisk debug
        uses: actions/upload-artifact@v3
        if: steps.prepareArtifact.outputs.zygiskDebugName
        with:
          name: ${{ steps.prepareArtifact.outputs.zygiskDebugName }}
          path: "./LSPosed-zygisk-Debug/*"

      - name: Upload mappings
        uses: actions/upload-artifact@v3
        with:
          name: mappings
          path: |
            magisk-loader/build/outputs/mapping
            app/build/outputs/mapping

      - name: Upload symbols
        uses: actions/upload-artifact@v3
        with:
          name: symbols
          path: build/symbols

      - name: Post to channel
        if: ${{ success() && github.event_name != 'pull_request' && github.ref == 'refs/heads/master' && github.ref_type != 'tag' && inputs.post_telegram != 'false' }}
        env:
          CHANNEL_ID: ${{ secrets.CHANNEL_ID }}
          DISCUSSION_ID: ${{ secrets.DISCUSSION_ID }}
          TOPIC_ID: ${{ secrets.TOPIC_ID }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
          COMMIT_URL: ${{ github.event.head_commit.url }}
        run: |
          if [ ! -z "${{ secrets.BOT_TOKEN }}" ]; then
            OUTPUT="magisk-loader/release/"
            export riruRelease=$(find $OUTPUT -name "LSPosed-v*-riru-release.zip")
            export riruDebug=$(find $OUTPUT -name "LSPosed-v*-riru-debug.zip")
            export zygiskRelease=$(find $OUTPUT -name "LSPosed-v*-zygisk-release.zip")
            export zygiskDebug=$(find $OUTPUT -name "LSPosed-v*-zygisk-debug.zip")
            ESCAPED=`python3 -c 'import json,os,urllib.parse; msg = json.dumps(os.environ["COMMIT_MESSAGE"]); print(urllib.parse.quote(msg if len(msg) <= 1024 else json.dumps(os.environ["COMMIT_URL"])))'`
            curl -v "https://api.telegram.org/bot${BOT_TOKEN}/sendMediaGroup?chat_id=${CHANNEL_ID}&media=%5B%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2FriruRelease%22%7D%2C%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2FzygiskRelease%22%7D%2C%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2FriruDebug%22%7D%2C%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2FzygiskDebug%22%2C%22caption%22:${ESCAPED}%7D%5D" -F riruRelease="@$riruRelease" -F riruDebug="@$riruDebug" -F zygiskRelease="@$zygiskRelease" -F zygiskDebug="@$zygiskDebug"
            # curl -v "https://api.telegram.org/bot${BOT_TOKEN}/sendMediaGroup?chat_id=${DISCUSSION_ID}&message_thread_id=${TOPIC_ID}&media=%5B%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2FriruRelease%22%7D%2C%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2FzygiskRelease%22%7D%2C%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2FriruDebug%22%7D%2C%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2FzygiskDebug%22%2C%22caption%22:${ESCAPED}%7D%5D" -F riruRelease="@$riruRelease" -F riruDebug="@$riruDebug" -F zygiskRelease="@$zygiskRelease" -F zygiskDebug="@$zygiskDebug"
          fi
